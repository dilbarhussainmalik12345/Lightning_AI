# Copyright The Lightning AI team.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[metadata]
name = "pytorch-lightning"
author = "Lightning-AI et al."
url = "https://github.com/Lightning-AI/lightning"

[build-system]
requires = [
    "setuptools",
    "wheel",
]


[tool.isort]
known_first_party = [
    "examples",
    "lightning",
    "lightning_app",
    "lightning_fabric",
    "pytorch_lightning",
    "integrations_app",
    "tests_app",
    "tests_cloud",
    "tests_fabric",
    "tests_pytorch",
]
profile = "black"
line_length = 120
force_sort_within_sections = "False"
order_by_type = "False"
skip = ["_notebooks"]


[tool.black]
line-length = 120
exclude = '(_notebooks/.*)'


[tool.ruff]
line-length = 120
# Enable Pyflakes `E` and `F` codes by default.
select = [
    "E", "W",  # see: https://pypi.org/project/pycodestyle
    "F",  # see: https://pypi.org/project/pyflakes
]
extend-select = [
    "C4",  # see: https://pypi.org/project/flake8-comprehensions
    "SIM",  # see: https://pypi.org/project/flake8-simplify
]
ignore = [
    "E731",  # Do not assign a lambda expression, use a def
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    "docs",
    "_notebooks"
]
ignore-init-module-imports = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.mypy]
files = [
    "src/lightning",
]
# This section is for folders with "-" as they are not valid python modules
exclude = [
    "src/lightning_app/__about__.py",
    "src/lightning_app/__setup__.py",
    "src/lightning_app/__version__.py",
    "src/lightning_fabric/__about__.py",
    "src/lightning_fabric/__setup__.py",
    "src/lightning_fabric/__version__.py",
    "src/lightning/app/cli/app-template",
    "src/lightning/app/cli/component-template",
    "src/lightning/app/cli/pl-app-template",
    "src/lightning/app/cli/react-ui-template",
]
install_types = "True"
non_interactive = "True"
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
show_error_codes = "True"
warn_redundant_casts = "True"
warn_unused_configs = "True"
warn_unused_ignores = "True"
allow_redefinition = "True"
# disable this rule as the Trainer attributes are defined in the connectors, not in its __init__
disable_error_code = "attr-defined"
# style choices
warn_no_return = "False"

# Ignore mypy errors for these files
# TODO: the goal is for this to be empty
[[tool.mypy.overrides]]
# the list can be generated with:
# mypy --no-error-summary 2>&1 | tr ':' ' ' | awk '{print $1}' | sort | uniq | sed 's/\.py//g; s|src/||g;  s|\/|\.|g' | xargs -I {} echo '"{}",'
module = [
    "lightning.app.api.http_methods",
    "lightning.app.api.request_types",
    "lightning.app.cli.cmd_install",
    "lightning.app.cli.commands.app_commands",
    "lightning.app.cli.commands.cd",
    "lightning.app.cli.commands.cp",
    "lightning.app.cli.commands.ls",
    "lightning.app.cli.connect.app",
    "lightning.app.components.database.client",
    "lightning.app.components.database.server",
    "lightning.app.components.database.utilities",
    "lightning.app.components.multi_node.base",
    "lightning.app.components.multi_node.fabric",
    "lightning.app.components.multi_node.pytorch_spawn",
    "lightning.app.components.multi_node.trainer",
    "lightning.app.components.python.popen",
    "lightning.app.components.python.tracer",
    "lightning.app.components.serve.auto_scaler",
    "lightning.app.components.serve.gradio_server",
    "lightning.app.components.serve.python_server",
    "lightning.app.components.serve.serve",
    "lightning.app.components.serve.streamlit",
    "lightning.app.components.serve.types.image",
    "lightning.app.components.serve.types.type",
    "lightning.app.components.training",
    "lightning.app.frontend.panel.app_state_comm",
    "lightning.app.frontend.panel.app_state_watcher",
    "lightning.app.frontend.panel.panel_frontend",
    "lightning.app.frontend.panel.panel_serve_render_fn",
    "lightning.app.frontend.streamlit_base",
    "lightning.app.frontend.stream_lit",
    "lightning.app.frontend.utils",
    "lightning.app.frontend.web",
    "lightning.app.perf.pdb",
    "lightning.app.runners.backends.backend",
    "lightning.app.runners.backends.cloud",
    "lightning.app.runners.backends.docker",
    "lightning.app.runners.backends.mp_process",
    "lightning.app.runners.cloud",
    "lightning.app.runners.multiprocess",
    "lightning.app.runners.runtime",
    "lightning.app.source_code.copytree",
    "lightning.app.source_code.hashing",
    "lightning.app.source_code.local",
    "lightning.app.source_code.tar",
    "lightning.app.source_code.uploader",
    "lightning.app.storage.copier",
    "lightning.app.storage.drive",
    "lightning.app.storage.filesystem",
    "lightning.app.storage.orchestrator",
    "lightning.app.storage.path",
    "lightning.app.storage.payload",
    "lightning.app.structures.dict",
    "lightning.app.structures.list",
    "lightning.app.testing.helpers",
    "lightning.app.testing.testing",
    "lightning.app.utilities.app_helpers",
    "lightning.app.utilities.app_logs",
    "lightning.app.utilities.cli_helpers",
    "lightning.app.utilities.cloud",
    "lightning.app.utilities.cluster_logs",
    "lightning.app.utilities.commands.base",
    "lightning.app.utilities.component",
    "lightning.app.utilities.enum",
    "lightning.app.utilities.exceptions",
    "lightning.app.utilities.git",
    "lightning.app.utilities.imports",
    "lightning.app.utilities.introspection",
    "lightning.app.utilities.layout",
    "lightning.app.utilities.load_app",
    "lightning.app.utilities.log_helpers",
    "lightning.app.utilities.login",
    "lightning.app.utilities.name_generator",
    "lightning.app.utilities.network",
    "lightning.app.utilities.openapi",
    "lightning.app.utilities.packaging.cloud_compute",
    "lightning.app.utilities.packaging.lightning_utils",
    "lightning.app.utilities.proxies",
    "lightning.app.utilities.scheduler",
    "lightning.app.utilities.state",
    "lightning.app.utilities.tracer",
    "lightning.app.utilities.tree",
    "lightning.store.authentication",
    "lightning.store.cloud_api",
    "lightning.store.save",
    "lightning.store.utils",
]
ignore_errors = "True"


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "warnings",
    "pass",
    "rank_zero_warn",
    "raise NotImplementedError",
]


[tool.pytest.ini_options]
norecursedirs = [
    ".git",
    ".github",
    "dist",
    "build",
    "docs",
]
addopts = [
    "--strict-markers",
    "--doctest-modules",
    "--color=yes",
    "--disable-pytest-warnings",
    "--ignore=legacy/checkpoints",
]
markers = [
    "cloud:Run the cloud tests for example",
]
filterwarnings = [
    "error::FutureWarning",
]
xfail_strict = true
junit_duration_report = "call"
